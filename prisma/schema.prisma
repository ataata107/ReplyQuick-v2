generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid())
  fullName  String
  email     String   @unique
  phone     String
  status    String   @default("new") // new, contacted, interested, closed
  avatarUrl String?  @map("avatar_url")
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  contacts Contact[]
  calls Call[]
  threads Thread[]

  @@map("users")
}

model Call {
  id              String    @id @default(cuid())
  userId          String    // ID of the user who initiated the call
  contactId       String    // ID of the contact being called
  sessionId       String    @unique // Retell session ID
  startTime       DateTime  @default(now())
  endedAt         DateTime?
  duration        Int?      // Duration in seconds
  status          String    @default("pending") // pending, in-progress, completed, failed
  direction       String    @default("outbound")
  channelType     String?   // phone_call, web_call, etc.
  cost            Float?    // Call cost from Retell
  transcriptText  String?   @db.Text // Full call transcript
  summary         String?   @db.Text // AI-generated summary
  userSentiment   String?   // Positive, Negative, Neutral, Unknown
  qualification   String?   // Lead qualification status
  recordingUrl    String?   // URL to call recording
  publicLogUrl    String?   // URL to public call log
  disconnectionReason String? // Why the call ended (user hangup, dial busy, error, etc)
  
  // Relationships
  user           User     @relation(fields: [userId], references: [id])
  contact        Contact  @relation(fields: [contactId], references: [id])
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
  @@index([contactId])
  @@index([sessionId])
}

model Contact {
  id        String   @id @default(uuid())
  userId    String?  // Optional now
  Name  String
  email     String?  @unique
  phone     String
  category  String?
  source    String   // "csv_import", "manual"
  status    String   @default("pending") // "pending", "contacted", "completed"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User?    @relation(fields: [userId], references: [id])
  calls   Call[]
  threads Thread[]

  @@index([userId])
  @@map("contacts")
}

model Thread {
  id        String    @id @default(uuid())
  contactId String
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  label     String?   // For auto-labeling (e.g., "Support", "Follow-up")
  
  contact   Contact   @relation(fields: [contactId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
  messages  Message[]

  @@index([contactId])
  @@index([userId])
  @@map("threads")
}

model Message {
  id        String   @id @default(uuid())
  threadId  String
  content   String
  channel   String   // "email", "sms", "whatsapp"
  direction String   // "inbound" or "outbound"
  status    String   // "sent", "delivered", "failed"
  metadata  Json?    // For storing channel-specific data
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  thread    Thread   @relation(fields: [threadId], references: [id])

  @@index([threadId])
  @@map("messages")
}
