generator client {More actions
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid())
  fullName  String
  email     String   @unique
  phone     String
  status    String   @default("new") // new, contacted, interested, closed
  avatarUrl String?  @map("avatar_url")
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  contacts Contact[]
  calls Call[]
  threads Thread[]

  @@map("users")
}

model Call {
  id                 String    @id @default(uuid())
  userId             String?   // Optional now
  contactId          String
  direction          String    // "inbound" or "outbound"
  status            String    // "scheduled", "in-progress", "completed", "failed"
  sentAt            DateTime? // Add this for when the call was sent/queued
  startTime         DateTime
  endTime           DateTime?
  duration          Int?      // in seconds
  recordingUrl      String?
  publicLogUrl      String?   // Add for public log URL
  disconnectionReason String? // Add for disconnection reason
  cost             Float?    // Add for call cost
  transcriptText   String?   
  summary          String?   
  qualification    String?   // "qualified", "not_qualified"
  userSentiment    String?   // "Positive", "Negative", "Neutral", "Unknown"
  callSid          String?   @unique

  user    User?   @relation(fields: [userId], references: [id], onDelete: SetNull) // Make user optional
  contact Contact @relation(fields: [contactId], references: [id])

  @@index([userId])
  @@index([contactId])
  @@map("calls")
}

model Contact {
  id        String   @id @default(uuid())
  userId    String?  // Optional now
  fullName  String
  Name  String
  email     String?  @unique
  phone     String
  category  String?
  source    String   // "csv_import", "manual"
  status    String   @default("pending") // "pending", "contacted", "completed"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User?    @relation(fields: [userId], references: [id])
  calls   Call[]
  threads Thread[]

  @@index([userId])
  @@map("contacts")
}

model Thread {
  id        String    @id @default(uuid())
  contactId String
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  label     String?   // For auto-labeling (e.g., "Support", "Follow-up")
  
  contact   Contact   @relation(fields: [contactId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
  messages  Message[]

  @@index([contactId])
  @@index([userId])
  @@map("threads")
}

model Message {
  id        String   @id @default(uuid())
  threadId  String
  content   String
  channel   String   // "email", "sms", "whatsapp"
  direction String   // "inbound" or "outbound"
  status    String   // "sent", "delivered", "failed"
  metadata  Json?    // For storing channel-specific data
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  thread    Thread   @relation(fields: [threadId], references: [id])

  @@index([threadId])
  @@map("messages")
}